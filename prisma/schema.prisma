// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken String?
  workouts Workout[]
  exercises Exercise[]
  personalRecords PersonalRecord[]
}

model Exercise {
  id Int @default(autoincrement()) @id
  name String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  type String
  muscleGroups String[]
  equipment String
  image String?
  workoutExercises WorkoutExercise[]
  personalRecords PersonalRecord[]

  @@unique([name, userId, equipment])
}

model Workout {
  id Int @default(autoincrement()) @id
  title String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startedAt DateTime @default(now())
  activeDuration Float @default(0)
  status WorkoutStatus @default(DRAFT)
  notes String?
  isPaused Boolean @default(false)
  pauseDuration Float @default(0)
  lastPauseStartTime DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  workoutExercises WorkoutExercise[]
}

model WorkoutExercise {
  id Int @default(autoincrement()) @id
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  exerciseOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes String?
  workoutSets WorkoutSet[]
  previousWorkoutExercise WorkoutExercise? @relation("WorkoutExerciseTemplate", fields: [previousWorkoutExerciseId], references: [id])
  previousWorkoutExerciseId Int?
  templatedWorkoutExercises WorkoutExercise[] @relation("WorkoutExerciseTemplate")
}

model WorkoutSet {
  id Int @default(autoincrement()) @id
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId Int
  setNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  notes String?
  type String @default("normal")
  reps Int?
  weight Float?
  duration Int?
  personalRecords PersonalRecord[]
}

model PersonalRecord {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  recordType String
  createdAt DateTime @default(now())
  workoutSet WorkoutSet @relation(fields: [workoutSetId], references: [id], onDelete: Cascade)
  workoutSetId Int
  @@unique([userId, exerciseId, recordType])
}

enum WorkoutStatus {
  ACTIVE
  DRAFT
  COMPLETED
}